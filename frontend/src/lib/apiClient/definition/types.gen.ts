// This file is auto-generated by @hey-api/openapi-ts

export type RatingOverview = {
    timeControl: TimeControl;
    ratings: Array<Rating>;
    current: number;
    highest: number;
    lowest: number;
};

export enum TimeControl {
    /**
     * Bullet
     */
    BULLET = 0,
    /**
     * Blitz
     */
    BLITZ = 1,
    /**
     * Rapid
     */
    RAPID = 2,
    /**
     * Classical
     */
    CLASSICAL = 3,
}

export type Rating = {
    rating: number;
    achievedAt: string;
};

export type ApiProblemDetails = ProblemDetails & {
    errors: Array<ApiProblemError>;
    [key: string]: unknown | Array<ApiProblemError>;
};

export type ApiProblemError = {
    errorCode: ErrorCode;
    description: string;
    metadata: {
        [key: string]: unknown;
    };
};

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    extensions: {
        [key: string]: unknown;
    };
    [key: string]:
        | unknown
        | (string | null)
        | (string | null)
        | (number | null)
        | (string | null)
        | (string | null)
        | {
              [key: string]: unknown;
          }
        | undefined;
};

export type PagedResultOfMinimalProfile = {
    items: Array<MinimalProfile>;
    totalCount: number;
    page: number;
    pageSize: number;
    totalPages: number;
};

export type MinimalProfile = {
    userId: string;
    userName: string;
};

export type Quest = {
    difficulty: QuestDifficulty;
    description: string;
    target: number;
    progress: number;
    canReplace: boolean;
    rewardCollected: boolean;
    streak: number;
};

export enum QuestDifficulty {
    /**
     * Easy
     */
    EASY = 5,
    /**
     * Medium
     */
    MEDIUM = 10,
    /**
     * Hard
     */
    HARD = 20,
}

export type SessionUser = {
    userId: string;
    type: string;
};

export type PrivateUser = SessionUser & {
    type: "authed";
} & {
    userName: string;
    about: string;
    countryCode: string;
    questPoints: number;
    createdAt: string;
    usernameLastChanged?: string | null;
    type: string;
};

export type GuestUser = SessionUser & {
    type: "guest";
} & {
    type: string;
};

export type PublicUser = {
    userId: string;
    userName: string;
    about: string;
    countryCode: string;
    questPoints: number;
    createdAt: string;
};

export type ValidationProblemDetails = HttpValidationProblemDetails & {
    errors: {
        [key: string]: Array<string>;
    };
    [key: string]:
        | unknown
        | {
              [key: string]: Array<string>;
          };
};

export type HttpValidationProblemDetails = ProblemDetails & {
    errors: {
        [key: string]: Array<string>;
    };
    [key: string]:
        | unknown
        | {
              [key: string]: Array<string>;
          };
};

export type ProfileEditRequest = {
    about: string;
    countryCode: string;
};

export type UsernameEditRequest = {
    username: string;
};

export type Preferences = {
    challengePreference: InteractionLevel;
    showChat: boolean;
};

export enum InteractionLevel {
    /**
     * NoOne
     */
    NO_ONE = 0,
    /**
     * Starred
     */
    STARRED = 1,
    /**
     * Everyone
     */
    EVERYONE = 2,
}

export type GameState = {
    pool: PoolKey;
    whitePlayer: GamePlayer;
    blackPlayer: GamePlayer;
    clocks: Clocks;
    sideToMove: GameColor;
    initialFen: string;
    moveHistory: Array<MoveSnapshot>;
    moveOptions: MoveOptions;
    drawState: DrawState;
    resultData?: GameResultData | null;
};

export type PoolKey = {
    poolType: PoolType;
    timeControl: TimeControlSettings;
};

export enum PoolType {
    /**
     * Rated
     */
    RATED = 0,
    /**
     * Casual
     */
    CASUAL = 1,
}

export type TimeControlSettings = {
    baseSeconds: number;
    incrementSeconds: number;
};

export type GamePlayer = {
    userId: string;
    isAuthenticated: boolean;
    color: GameColor;
    userName: string;
    countryCode: string;
    rating?: number | null;
};

export enum GameColor {
    /**
     * White
     */
    WHITE = 0,
    /**
     * Black
     */
    BLACK = 1,
}

export type Clocks = {
    whiteClock: number;
    blackClock: number;
    lastUpdated?: number | null;
};

export type MoveSnapshot = {
    path: MovePath;
    san: string;
    timeLeft: number;
};

export type MovePath = {
    fromIdx: number;
    toIdx: number;
    capturedIdxs?: Array<number> | null;
    triggerIdxs?: Array<number> | null;
    sideEffects?: Array<MoveSideEffectPath> | null;
    promotesTo?: PieceType | null;
};

export type MoveSideEffectPath = {
    fromIdx: number;
    toIdx: number;
};

export enum PieceType {
    /**
     * King
     */
    KING = 0,
    /**
     * Queen
     */
    QUEEN = 1,
    /**
     * Pawn
     */
    PAWN = 2,
    /**
     * Rook
     */
    ROOK = 3,
    /**
     * Bishop
     */
    BISHOP = 4,
    /**
     * Horsey
     */
    HORSEY = 5,
    /**
     * Knook
     */
    KNOOK = 6,
    /**
     * Antiqueen
     */
    ANTIQUEEN = 7,
    /**
     * UnderagePawn
     */
    UNDERAGE_PAWN = 8,
    /**
     * TraitorRook
     */
    TRAITOR_ROOK = 9,
}

export type MoveOptions = {
    legalMoves: Array<MovePath>;
    hasForcedMoves: boolean;
};

export type DrawState = {
    activeRequester?: GameColor | null;
    whiteCooldown: number;
    blackCooldown: number;
};

export type GameResultData = {
    result: GameResult;
    resultDescription: string;
    whiteRatingChange?: number | null;
    blackRatingChange?: number | null;
};

export enum GameResult {
    /**
     * WhiteWin
     */
    WHITE_WIN = 0,
    /**
     * BlackWin
     */
    BLACK_WIN = 1,
    /**
     * Draw
     */
    DRAW = 2,
    /**
     * Aborted
     */
    ABORTED = 3,
}

export type PagedResultOfGameSummaryDto = {
    items: Array<GameSummary>;
    totalCount: number;
    page: number;
    pageSize: number;
    totalPages: number;
};

export type GameSummary = {
    gameToken: string;
    whitePlayer: PlayerSummary;
    blackPlayer: PlayerSummary;
    result: GameResult;
    createdAt: string;
};

export type PlayerSummary = {
    userId: string;
    userName: string;
    rating?: number | null;
};

export enum ErrorCode {
    PROFILE_NOT_FOUND = "Profile.NotFound",
    PROFILE_COOLDOWN_SETTING = "Profile.Cooldown.Setting",
    PROFILE_USER_NAME_TAKEN = "Profile.UserNameTaken",
    PROFILE_INVALID_PROFILE_PICTURE = "Profile.InvalidProfilePicture",
    SOCIAL_CANNOT_STAR_SELF = "Social.CannotStarSelf",
    SOCIAL_ALREADY_STARRED = "Social.AlreadyStarred",
    SOCIAL_NOT_STARRED = "Social.NotStarred",
    SOCIAL_CANNOT_BLOCK_SELF = "Social.CannotBlockSelf",
    SOCIAL_ALREADY_BLOCKED = "Social.AlreadyBlocked",
    SOCIAL_NOT_BLOCKED = "Social.NotBlocked",
    AUTH_TOKEN_MISSING = "Auth.TokenMissing",
    AUTH_TOKEN_INVALID = "Auth.TokenInvalid",
    AUTH_O_AUTH_INVALID = "Auth.OAuth.Invalid",
    AUTH_O_AUTH_PROVIDER_NOT_FOUND = "Auth.OAuth.ProviderNotFound",
    GAME_LOGIC_PIECE_NOT_FOUND = "GameLogic.PieceNotFound",
    GAME_LOGIC_POINT_OUT_OF_BOUND = "GameLogic.PointOutOfBound",
    MATCHMAKING_SEEK_NOT_FOUND = "Matchmaking.SeekNotFound",
    MATCHMAKING_SEEKER_NOT_COMPATIBLE = "Matchmaking.SeekerNotCompatible",
    PLAYER_SESSION_CONNECTION_IN_GAME = "PlayerSession.ConnectionInGame",
    PLAYER_SESSION_TOO_MANY_GAMES = "PlayerSession.TooManyGames",
    GAME_NOT_FOUND = "Game.NotFound",
    GAME_ALREADY_ENDED = "Game.AlreadyEnded",
    GAME_PLAYER_INVALID = "Game.PlayerInvalid",
    GAME_MOVE_INVALID = "Game.MoveInvalid",
    GAME_DRAW_ALREADY_REQUESTED = "Game.DrawAlreadyRequested",
    GAME_DRAW_ON_COOLDOWN = "Game.DrawOnCooldown",
    GAME_DRAW_NOT_REQUESTED = "Game.DrawNotRequested",
    GAME_CHAT_INVALID_USER = "GameChat.InvalidUser",
    GAME_CHAT_INVALID_MESSAGE = "GameChat.InvalidMessage",
    GAME_CHAT_ON_COOLDOWN = "GameChat.OnCooldown",
    QUEST_CANNOT_REPLACE = "Quest.CannotReplace",
    QUEST_NO_REWARD_TO_COLLECT = "Quest.NoRewardToCollect",
}

export type GetRatingArchivesData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        since?: string | null;
    };
    url: "/api/Rating/{userId}";
};

export type GetRatingArchivesErrors = {
    404: ApiProblemDetails;
};

export type GetRatingArchivesError =
    GetRatingArchivesErrors[keyof GetRatingArchivesErrors];

export type GetRatingArchivesResponses = {
    200: Array<RatingOverview>;
};

export type GetRatingArchivesResponse =
    GetRatingArchivesResponses[keyof GetRatingArchivesResponses];

export type GetStarredUsersData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        Page?: number;
        PageSize?: number;
    };
    url: "/api/Social/starred/{userId}";
};

export type GetStarredUsersErrors = {
    400: ApiProblemDetails;
};

export type GetStarredUsersError =
    GetStarredUsersErrors[keyof GetStarredUsersErrors];

export type GetStarredUsersResponses = {
    200: PagedResultOfMinimalProfile;
};

export type GetStarredUsersResponse =
    GetStarredUsersResponses[keyof GetStarredUsersResponses];

export type GetStarsReceivedCountData = {
    body?: never;
    path: {
        starredUserId: string;
    };
    query?: never;
    url: "/api/Social/stars/{starredUserId}";
};

export type GetStarsReceivedCountResponses = {
    200: number;
};

export type GetStarsReceivedCountResponse =
    GetStarsReceivedCountResponses[keyof GetStarsReceivedCountResponses];

export type GetHasStarredData = {
    body?: never;
    path: {
        starredUserId: string;
    };
    query?: never;
    url: "/api/Social/star/{starredUserId}/exists";
};

export type GetHasStarredErrors = {
    401: ApiProblemDetails;
};

export type GetHasStarredError = GetHasStarredErrors[keyof GetHasStarredErrors];

export type GetHasStarredResponses = {
    200: boolean;
};

export type GetHasStarredResponse =
    GetHasStarredResponses[keyof GetHasStarredResponses];

export type RemoveStarData = {
    body?: never;
    path: {
        starredUserId: string;
    };
    query?: never;
    url: "/api/Social/star/{starredUserId}";
};

export type RemoveStarErrors = {
    401: ApiProblemDetails;
    404: ProblemDetails;
};

export type RemoveStarError = RemoveStarErrors[keyof RemoveStarErrors];

export type RemoveStarResponses = {
    204: void;
};

export type RemoveStarResponse = RemoveStarResponses[keyof RemoveStarResponses];

export type AddStarData = {
    body?: never;
    path: {
        starredUserId: string;
    };
    query?: never;
    url: "/api/Social/star/{starredUserId}";
};

export type AddStarErrors = {
    401: ApiProblemDetails;
    404: ApiProblemDetails;
    409: ApiProblemDetails;
};

export type AddStarError = AddStarErrors[keyof AddStarErrors];

export type AddStarResponses = {
    204: void;
};

export type AddStarResponse = AddStarResponses[keyof AddStarResponses];

export type GetBlockedUsersData = {
    body?: never;
    path?: never;
    query?: {
        Page?: number;
        PageSize?: number;
    };
    url: "/api/Social/blocked";
};

export type GetBlockedUsersErrors = {
    400: ApiProblemDetails;
    401: ApiProblemDetails;
};

export type GetBlockedUsersError =
    GetBlockedUsersErrors[keyof GetBlockedUsersErrors];

export type GetBlockedUsersResponses = {
    200: PagedResultOfMinimalProfile;
};

export type GetBlockedUsersResponse =
    GetBlockedUsersResponses[keyof GetBlockedUsersResponses];

export type GetHasBlockedData = {
    body?: never;
    path: {
        blockedUserId: string;
    };
    query?: never;
    url: "/api/Social/block/{blockedUserId}/exists";
};

export type GetHasBlockedErrors = {
    401: ApiProblemDetails;
};

export type GetHasBlockedError = GetHasBlockedErrors[keyof GetHasBlockedErrors];

export type GetHasBlockedResponses = {
    200: boolean;
};

export type GetHasBlockedResponse =
    GetHasBlockedResponses[keyof GetHasBlockedResponses];

export type UnblockUserData = {
    body?: never;
    path: {
        blockedUserId: string;
    };
    query?: never;
    url: "/api/Social/block/{blockedUserId}";
};

export type UnblockUserErrors = {
    401: ApiProblemDetails;
    404: ProblemDetails;
};

export type UnblockUserError = UnblockUserErrors[keyof UnblockUserErrors];

export type UnblockUserResponses = {
    204: void;
};

export type UnblockUserResponse =
    UnblockUserResponses[keyof UnblockUserResponses];

export type BlockUserData = {
    body?: never;
    path: {
        blockedUserId: string;
    };
    query?: never;
    url: "/api/Social/block/{blockedUserId}";
};

export type BlockUserErrors = {
    401: ApiProblemDetails;
    404: ApiProblemDetails;
    409: ApiProblemDetails;
};

export type BlockUserError = BlockUserErrors[keyof BlockUserErrors];

export type BlockUserResponses = {
    204: void;
};

export type BlockUserResponse = BlockUserResponses[keyof BlockUserResponses];

export type GetDailyQuestData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Quests";
};

export type GetDailyQuestErrors = {
    401: ApiProblemDetails;
};

export type GetDailyQuestError = GetDailyQuestErrors[keyof GetDailyQuestErrors];

export type GetDailyQuestResponses = {
    200: Quest;
};

export type GetDailyQuestResponse =
    GetDailyQuestResponses[keyof GetDailyQuestResponses];

export type ReplaceDailyQuestData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Quests/replace";
};

export type ReplaceDailyQuestErrors = {
    401: ApiProblemDetails;
    403: ApiProblemDetails;
};

export type ReplaceDailyQuestError =
    ReplaceDailyQuestErrors[keyof ReplaceDailyQuestErrors];

export type ReplaceDailyQuestResponses = {
    200: Quest;
};

export type ReplaceDailyQuestResponse =
    ReplaceDailyQuestResponses[keyof ReplaceDailyQuestResponses];

export type CollectQuestRewardData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Quests/claim";
};

export type CollectQuestRewardErrors = {
    401: ApiProblemDetails;
    404: ApiProblemDetails;
};

export type CollectQuestRewardError =
    CollectQuestRewardErrors[keyof CollectQuestRewardErrors];

export type CollectQuestRewardResponses = {
    200: number;
};

export type CollectQuestRewardResponse =
    CollectQuestRewardResponses[keyof CollectQuestRewardResponses];

export type GetSessionUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Profile/me";
};

export type GetSessionUserErrors = {
    401: ApiProblemDetails;
};

export type GetSessionUserError =
    GetSessionUserErrors[keyof GetSessionUserErrors];

export type GetSessionUserResponses = {
    200: SessionUser;
};

export type GetSessionUserResponse =
    GetSessionUserResponses[keyof GetSessionUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: "/api/Profile/by-username/{username}";
};

export type GetUserErrors = {
    404: ApiProblemDetails;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    200: PublicUser;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type EditProfileSettingsData = {
    body: ProfileEditRequest;
    path?: never;
    query?: never;
    url: "/api/Profile/edit-profile";
};

export type EditProfileSettingsErrors = {
    400: ValidationProblemDetails;
    401: ApiProblemDetails;
};

export type EditProfileSettingsError =
    EditProfileSettingsErrors[keyof EditProfileSettingsErrors];

export type EditProfileSettingsResponses = {
    200: unknown;
};

export type EditUsernameData = {
    body: UsernameEditRequest;
    path?: never;
    query?: never;
    url: "/api/Profile/edit-username";
};

export type EditUsernameErrors = {
    401: ApiProblemDetails;
};

export type EditUsernameError = EditUsernameErrors[keyof EditUsernameErrors];

export type EditUsernameResponses = {
    204: void;
};

export type EditUsernameResponse =
    EditUsernameResponses[keyof EditUsernameResponses];

export type DeleteProfilePictureData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Profile/profile-picture";
};

export type DeleteProfilePictureErrors = {
    401: ApiProblemDetails;
};

export type DeleteProfilePictureError =
    DeleteProfilePictureErrors[keyof DeleteProfilePictureErrors];

export type DeleteProfilePictureResponses = {
    204: void;
};

export type DeleteProfilePictureResponse =
    DeleteProfilePictureResponses[keyof DeleteProfilePictureResponses];

export type UploadProfilePictureData = {
    body?: {
        File?: (Blob | File) | null;
    };
    path?: never;
    query?: never;
    url: "/api/Profile/profile-picture";
};

export type UploadProfilePictureErrors = {
    401: ApiProblemDetails;
};

export type UploadProfilePictureError =
    UploadProfilePictureErrors[keyof UploadProfilePictureErrors];

export type UploadProfilePictureResponses = {
    201: unknown;
};

export type GetProfilePictureData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: "/api/Profile/profile-picture/{userId}";
};

export type GetProfilePictureResponses = {
    200: Blob | File;
};

export type GetProfilePictureResponse =
    GetProfilePictureResponses[keyof GetProfilePictureResponses];

export type GetPreferencesData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Preference";
};

export type GetPreferencesErrors = {
    401: ApiProblemDetails;
};

export type GetPreferencesError =
    GetPreferencesErrors[keyof GetPreferencesErrors];

export type GetPreferencesResponses = {
    200: Preferences;
};

export type GetPreferencesResponse =
    GetPreferencesResponses[keyof GetPreferencesResponses];

export type SetPreferencesData = {
    body: Preferences;
    path?: never;
    query?: never;
    url: "/api/Preference";
};

export type SetPreferencesErrors = {
    401: ApiProblemDetails;
};

export type SetPreferencesError =
    SetPreferencesErrors[keyof SetPreferencesErrors];

export type SetPreferencesResponses = {
    204: void;
};

export type SetPreferencesResponse =
    SetPreferencesResponses[keyof SetPreferencesResponses];

export type GetGameData = {
    body?: never;
    path: {
        gameToken: string;
    };
    query?: never;
    url: "/api/Game/{gameToken}";
};

export type GetGameErrors = {
    401: ApiProblemDetails;
    404: ApiProblemDetails;
};

export type GetGameError = GetGameErrors[keyof GetGameErrors];

export type GetGameResponses = {
    200: GameState;
};

export type GetGameResponse = GetGameResponses[keyof GetGameResponses];

export type GetGameResultsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        Page?: number;
        PageSize?: number;
    };
    url: "/api/Game/results/{userId}";
};

export type GetGameResultsResponses = {
    200: PagedResultOfGameSummaryDto;
};

export type GetGameResultsResponse =
    GetGameResultsResponses[keyof GetGameResultsResponses];

export type RefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/refresh";
};

export type RefreshErrors = {
    401: ApiProblemDetails;
    403: ApiProblemDetails;
};

export type RefreshError = RefreshErrors[keyof RefreshErrors];

export type RefreshResponses = {
    204: void;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/logout";
};

export type LogoutResponses = {
    204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type CreateGuestUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/guest";
};

export type CreateGuestUserResponses = {
    204: void;
};

export type CreateGuestUserResponse =
    CreateGuestUserResponses[keyof CreateGuestUserResponses];

export type TestAuthedData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/test-auth";
};

export type TestAuthedErrors = {
    401: ApiProblemDetails;
};

export type TestAuthedError = TestAuthedErrors[keyof TestAuthedErrors];

export type TestAuthedResponses = {
    204: void;
};

export type TestAuthedResponse = TestAuthedResponses[keyof TestAuthedResponses];

export type TestGuestData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/test-guest-auth";
};

export type TestGuestErrors = {
    401: ApiProblemDetails;
};

export type TestGuestError = TestGuestErrors[keyof TestGuestErrors];

export type TestGuestResponses = {
    204: void;
};

export type TestGuestResponse = TestGuestResponses[keyof TestGuestResponses];

export type OAuthCallbackData = {
    body?: never;
    path: {
        provider: string;
    };
    query?: never;
    url: "/api/OAuth/{provider}/callback";
};

export type OAuthCallbackResponses = {
    200: Blob | File;
};

export type OAuthCallbackResponse =
    OAuthCallbackResponses[keyof OAuthCallbackResponses];

export type SigninOAuthData = {
    body?: never;
    path: {
        provider: string;
    };
    query?: never;
    url: "/api/OAuth/signin/{provider}";
};

export type ClientOptions = {
    baseUrl: "https://localhost:7266" | (string & {});
};
