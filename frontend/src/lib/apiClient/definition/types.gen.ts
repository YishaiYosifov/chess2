// This file is auto-generated by @hey-api/openapi-ts

export type SessionUser = {
    userId: string;
    type: string;
};

export type PrivateUser = SessionUser & {
    type: "authed";
} & {
    userName?: string | null;
    email?: string | null;
    about?: string | null;
    countryCode?: string | null;
    type: string;
};

export type GuestUser = SessionUser & {
    type: "guest";
} & {
    type: string;
};

export type ApiProblemDetails = ProblemDetails & {
    errors: Array<ApiProblemError>;
    [key: string]: unknown | Array<ApiProblemError>;
};

export enum ErrorCode {
    USER_NOT_FOUND = "User.NotFound",
    USER_COOLDOWN_SETTING = "User.Cooldown.Setting",
    AUTH_TOKEN_MISSING = "Auth.TokenMissing",
    AUTH_TOKEN_INVALID = "Auth.TokenInvalid",
    AUTH_O_AUTH_INVALID = "Auth.OAuth.Invalid",
    AUTH_O_AUTH_PROVIDER_NOT_FOUND = "Auth.OAuth.ProviderNotFound",
    GAME_LOGIC_PIECE_NOT_FOUND = "GameLogic.PieceNotFound",
    GAME_LOGIC_POINT_OUT_OF_BOUND = "GameLogic.PointOutOfBound",
    MATCHMAKING_SEEK_NOT_FOUND = "Matchmaking.SeekNotFound",
    MATCHMAKING_SEEKER_NOT_COMPATIBLE = "Matchmaking.SeekerNotCompatible",
    PLAYER_SESSION_CONNECTION_IN_GAME = "PlayerSession.ConnectionInGame",
    PLAYER_SESSION_TOO_MANY_GAMES = "PlayerSession.TooManyGames",
    GAME_NOT_FOUND = "Game.NotFound",
    GAME_ALREADY_ENDED = "Game.AlreadyEnded",
    GAME_PLAYER_INVALID = "Game.PlayerInvalid",
    GAME_MOVE_INVALID = "Game.MoveInvalid",
    GAME_DRAW_ALREADY_REQUESTED = "Game.DrawAlreadyRequested",
    GAME_DRAW_ON_COOLDOWN = "Game.DrawOnCooldown",
    GAME_DRAW_NOT_REQUESTED = "Game.DrawNotRequested",
    GAME_CHAT_INVALID_USER = "GameChat.InvalidUser",
    GAME_CHAT_INVALID_MESSAGE = "GameChat.InvalidMessage",
    GAME_CHAT_ON_COOLDOWN = "GameChat.OnCooldown",
}

export type ApiProblemError = {
    errorCode:
        | "User.NotFound"
        | "User.Cooldown.Setting"
        | "Auth.TokenMissing"
        | "Auth.TokenInvalid"
        | "Auth.OAuth.Invalid"
        | "Auth.OAuth.ProviderNotFound"
        | "GameLogic.PieceNotFound"
        | "GameLogic.PointOutOfBound"
        | "Matchmaking.SeekNotFound"
        | "Matchmaking.SeekerNotCompatible"
        | "PlayerSession.ConnectionInGame"
        | "PlayerSession.TooManyGames"
        | "Game.NotFound"
        | "Game.AlreadyEnded"
        | "Game.PlayerInvalid"
        | "Game.MoveInvalid"
        | "Game.DrawAlreadyRequested"
        | "Game.DrawOnCooldown"
        | "Game.DrawNotRequested"
        | "GameChat.InvalidUser"
        | "GameChat.InvalidMessage"
        | "GameChat.OnCooldown";
    description: string;
};

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    extensions: {
        [key: string]: unknown;
    };
    [key: string]:
        | unknown
        | (string | null)
        | (string | null)
        | (number | null)
        | (string | null)
        | (string | null)
        | {
              [key: string]: unknown;
          }
        | undefined;
};

export type PublicUser = {
    userId: string;
    userName?: string | null;
    about?: string | null;
    countryCode?: string | null;
};

export type ValidationProblemDetails = HttpValidationProblemDetails & {
    errors: {
        [key: string]: Array<string>;
    };
    [key: string]:
        | unknown
        | {
              [key: string]: Array<string>;
          };
};

export type HttpValidationProblemDetails = ProblemDetails & {
    errors: {
        [key: string]: Array<string>;
    };
    [key: string]:
        | unknown
        | {
              [key: string]: Array<string>;
          };
};

export type Operation = OperationBase & {
    value?: unknown;
};

export type OperationBase = {
    path?: string | null;
    op?: string | null;
    from?: string | null;
};

export type RatingOverview = {
    timeControl: TimeControl;
    ratings: Array<Rating>;
    current: number;
    highest: number;
    lowest: number;
};

export enum TimeControl {
    /**
     * Bullet
     */
    BULLET = 0,
    /**
     * Blitz
     */
    BLITZ = 1,
    /**
     * Rapid
     */
    RAPID = 2,
    /**
     * Classical
     */
    CLASSICAL = 3,
}

export type Rating = {
    rating: number;
    at: number;
};

export type GameState = {
    pool: PoolKey;
    whitePlayer: GamePlayer;
    blackPlayer: GamePlayer;
    clocks: Clocks;
    sideToMove: GameColor;
    initialFen: string;
    moveHistory: Array<MoveSnapshot>;
    moveOptions: MoveOptions;
    drawState: DrawState;
    resultData?: GameResultData | null;
};

export type PoolKey = {
    poolType: PoolType;
    timeControl: TimeControlSettings;
};

export enum PoolType {
    /**
     * Rated
     */
    RATED = 0,
    /**
     * Casual
     */
    CASUAL = 1,
}

export type TimeControlSettings = {
    baseSeconds: number;
    incrementSeconds: number;
};

export type GamePlayer = {
    userId: string;
    color: GameColor;
    userName: string;
    countryCode?: string | null;
    rating?: number | null;
};

export enum GameColor {
    /**
     * White
     */
    WHITE = 0,
    /**
     * Black
     */
    BLACK = 1,
}

export type Clocks = {
    whiteClock: number;
    blackClock: number;
    lastUpdated?: number | null;
};

export type MoveSnapshot = {
    path: MovePath;
    san: string;
    timeLeft: number;
};

export type MovePath = {
    fromIdx: number;
    toIdx: number;
    capturedIdxs?: Array<number> | null;
    triggerIdxs?: Array<number> | null;
    sideEffects?: Array<MoveSideEffectPath> | null;
    promotesTo?: PieceType | null;
};

export type MoveSideEffectPath = {
    fromIdx: number;
    toIdx: number;
};

export enum PieceType {
    /**
     * King
     */
    KING = 0,
    /**
     * Queen
     */
    QUEEN = 1,
    /**
     * Pawn
     */
    PAWN = 2,
    /**
     * Rook
     */
    ROOK = 3,
    /**
     * Bishop
     */
    BISHOP = 4,
    /**
     * Horsey
     */
    HORSEY = 5,
    /**
     * Knook
     */
    KNOOK = 6,
    /**
     * Antiqueen
     */
    ANTIQUEEN = 7,
    /**
     * UnderagePawn
     */
    UNDERAGE_PAWN = 8,
    /**
     * TraitorRook
     */
    TRAITOR_ROOK = 9,
}

export type MoveOptions = {
    legalMoves: Array<MovePath>;
    hasForcedMoves: boolean;
};

export type DrawState = {
    activeRequester?: GameColor | null;
    whiteCooldown: number;
    blackCooldown: number;
};

export type GameResultData = {
    result: GameResult;
    resultDescription: string;
    whiteRatingChange?: number | null;
    blackRatingChange?: number | null;
};

export enum GameResult {
    /**
     * WhiteWin
     */
    WHITE_WIN = 0,
    /**
     * BlackWin
     */
    BLACK_WIN = 1,
    /**
     * Draw
     */
    DRAW = 2,
    /**
     * Aborted
     */
    ABORTED = 3,
}

export type PagedResultOfGameSummaryDto = {
    items: Array<GameSummary>;
    totalCount: number;
    page: number;
    pageSize: number;
    totalPages: number;
};

export type GameSummary = {
    gameToken: string;
    whitePlayer: PlayerSummary;
    blackPlayer: PlayerSummary;
    result: GameResult;
    createdAt: string;
};

export type PlayerSummary = {
    userId: string;
    userName: string;
    rating?: number | null;
};

export type GetSessionUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Profile/me";
};

export type GetSessionUserErrors = {
    401: ApiProblemDetails;
};

export type GetSessionUserError =
    GetSessionUserErrors[keyof GetSessionUserErrors];

export type GetSessionUserResponses = {
    200: SessionUser;
};

export type GetSessionUserResponse =
    GetSessionUserResponses[keyof GetSessionUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: "/api/Profile/by-username/{username}";
};

export type GetUserErrors = {
    404: ApiProblemDetails;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    200: PublicUser;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type EditProfileSettingsData = {
    body: Array<Operation>;
    path?: never;
    query?: never;
    url: "/api/Profile/edit-profile";
};

export type EditProfileSettingsErrors = {
    400: ValidationProblemDetails;
    401: ApiProblemDetails;
};

export type EditProfileSettingsError =
    EditProfileSettingsErrors[keyof EditProfileSettingsErrors];

export type EditProfileSettingsResponses = {
    200: PrivateUser;
};

export type EditProfileSettingsResponse =
    EditProfileSettingsResponses[keyof EditProfileSettingsResponses];

export type EditUsernameData = {
    body: string;
    path?: never;
    query?: never;
    url: "/api/Profile/edit-username";
};

export type EditUsernameErrors = {
    401: ApiProblemDetails;
};

export type EditUsernameError = EditUsernameErrors[keyof EditUsernameErrors];

export type EditUsernameResponses = {
    204: void;
};

export type EditUsernameResponse =
    EditUsernameResponses[keyof EditUsernameResponses];

export type GetRatingArchivesData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        since?: string | null;
    };
    url: "/api/Rating/{userId}";
};

export type GetRatingArchivesErrors = {
    404: ApiProblemDetails;
};

export type GetRatingArchivesError =
    GetRatingArchivesErrors[keyof GetRatingArchivesErrors];

export type GetRatingArchivesResponses = {
    200: Array<RatingOverview>;
};

export type GetRatingArchivesResponse =
    GetRatingArchivesResponses[keyof GetRatingArchivesResponses];

export type GetGameData = {
    body?: never;
    path: {
        gameToken: string;
    };
    query?: never;
    url: "/api/Game/{gameToken}";
};

export type GetGameErrors = {
    401: ApiProblemDetails;
    404: ApiProblemDetails;
};

export type GetGameError = GetGameErrors[keyof GetGameErrors];

export type GetGameResponses = {
    200: GameState;
};

export type GetGameResponse = GetGameResponses[keyof GetGameResponses];

export type GetGameResultsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        Page?: number;
        PageSize?: number;
        Skip?: number;
    };
    url: "/api/Game/results/{userId}";
};

export type GetGameResultsResponses = {
    200: PagedResultOfGameSummaryDto;
};

export type GetGameResultsResponse =
    GetGameResultsResponses[keyof GetGameResultsResponses];

export type RefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/refresh";
};

export type RefreshErrors = {
    401: ApiProblemDetails;
    403: ApiProblemDetails;
};

export type RefreshError = RefreshErrors[keyof RefreshErrors];

export type RefreshResponses = {
    204: void;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/logout";
};

export type LogoutResponses = {
    204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type CreateGuestUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/guest";
};

export type CreateGuestUserResponses = {
    204: void;
};

export type CreateGuestUserResponse =
    CreateGuestUserResponses[keyof CreateGuestUserResponses];

export type TestAuthedData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/test-auth";
};

export type TestAuthedErrors = {
    401: ApiProblemDetails;
};

export type TestAuthedError = TestAuthedErrors[keyof TestAuthedErrors];

export type TestAuthedResponses = {
    204: void;
};

export type TestAuthedResponse = TestAuthedResponses[keyof TestAuthedResponses];

export type TestGuestData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/Auth/test-guest-auth";
};

export type TestGuestErrors = {
    401: ApiProblemDetails;
};

export type TestGuestError = TestGuestErrors[keyof TestGuestErrors];

export type TestGuestResponses = {
    204: void;
};

export type TestGuestResponse = TestGuestResponses[keyof TestGuestResponses];

export type OAuthCallbackData = {
    body?: never;
    path: {
        provider: string;
    };
    query?: never;
    url: "/api/OAuth/{provider}/callback";
};

export type OAuthCallbackResponses = {
    200: Blob | File;
};

export type OAuthCallbackResponse =
    OAuthCallbackResponses[keyof OAuthCallbackResponses];

export type SigninOAuthData = {
    body?: never;
    path: {
        provider: string;
    };
    query?: never;
    url: "/api/OAuth/signin/{provider}";
};

export type ClientOptions = {
    baseUrl: "https://localhost:7266" | (string & {});
};
