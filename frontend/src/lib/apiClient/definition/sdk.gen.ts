// This file is auto-generated by @hey-api/openapi-ts

import type {
    Options as ClientOptions,
    TDataShape,
    Client,
} from "@hey-api/client-next";
import type {
    GetAuthedUserData,
    GetAuthedUserResponse,
    GetAuthedUserError,
    GetMyIdData,
    GetMyIdError,
    GetUserData,
    GetUserResponse,
    GetUserError,
    EditProfileSettingsData,
    EditProfileSettingsResponse,
    EditProfileSettingsError,
    EditUsernameData,
    EditUsernameResponse,
    EditUsernameError,
    GetLiveGameData,
    GetLiveGameResponse,
    GetLiveGameError,
    RefreshData,
    RefreshResponse,
    RefreshError,
    LogoutData,
    LogoutResponse,
    CreateGuestUserData,
    CreateGuestUserResponse,
    TestAuthedData,
    TestAuthedResponse,
    TestAuthedError,
    TestGuestData,
    TestGuestResponse,
    TestGuestError,
    OAuthCallbackData,
    SigninOAuthData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAuthedUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetAuthedUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAuthedUserResponse,
        GetAuthedUserError,
        ThrowOnError
    >({
        url: "/api/Profile/me",
        ...options,
    });
};

export const getMyId = <ThrowOnError extends boolean = false>(
    options?: Options<GetMyIdData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        unknown,
        GetMyIdError,
        ThrowOnError
    >({
        url: "/api/Profile/my-id",
        ...options,
    });
};

export const getUser = <ThrowOnError extends boolean = false>(
    options: Options<GetUserData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetUserResponse,
        GetUserError,
        ThrowOnError
    >({
        url: "/api/Profile/by-username/{username}",
        ...options,
    });
};

export const editProfileSettings = <ThrowOnError extends boolean = false>(
    options: Options<EditProfileSettingsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).patch<
        EditProfileSettingsResponse,
        EditProfileSettingsError,
        ThrowOnError
    >({
        url: "/api/Profile/edit-profile",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const editUsername = <ThrowOnError extends boolean = false>(
    options: Options<EditUsernameData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<
        EditUsernameResponse,
        EditUsernameError,
        ThrowOnError
    >({
        url: "/api/Profile/edit-username",
        ...options,
        headers: {
            "Content-Type": "application/json-patch+json",
            ...options?.headers,
        },
    });
};

export const getLiveGame = <ThrowOnError extends boolean = false>(
    options: Options<GetLiveGameData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetLiveGameResponse,
        GetLiveGameError,
        ThrowOnError
    >({
        url: "/live/{gameToken}",
        ...options,
    });
};

export const refresh = <ThrowOnError extends boolean = false>(
    options?: Options<RefreshData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        RefreshResponse,
        RefreshError,
        ThrowOnError
    >({
        url: "/api/Auth/refresh",
        ...options,
    });
};

export const logout = <ThrowOnError extends boolean = false>(
    options?: Options<LogoutData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        LogoutResponse,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/logout",
        ...options,
    });
};

export const createGuestUser = <ThrowOnError extends boolean = false>(
    options?: Options<CreateGuestUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        CreateGuestUserResponse,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/guest",
        ...options,
    });
};

export const testAuthed = <ThrowOnError extends boolean = false>(
    options?: Options<TestAuthedData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        TestAuthedResponse,
        TestAuthedError,
        ThrowOnError
    >({
        url: "/api/Auth/test-auth",
        ...options,
    });
};

export const testGuest = <ThrowOnError extends boolean = false>(
    options?: Options<TestGuestData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        TestGuestResponse,
        TestGuestError,
        ThrowOnError
    >({
        url: "/api/Auth/test-guest-auth",
        ...options,
    });
};

export const oAuthCallback = <ThrowOnError extends boolean = false>(
    options: Options<OAuthCallbackData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        unknown,
        unknown,
        ThrowOnError
    >({
        url: "/api/OAuth/{provider}/callback",
        ...options,
    });
};

export const signinOAuth = <ThrowOnError extends boolean = false>(
    options: Options<SigninOAuthData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        unknown,
        unknown,
        ThrowOnError
    >({
        url: "/api/OAuth/signin/{provider}",
        ...options,
    });
};
