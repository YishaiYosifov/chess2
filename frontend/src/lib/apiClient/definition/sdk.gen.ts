// This file is auto-generated by @hey-api/openapi-ts

import {
    type Client,
    formDataBodySerializer,
    type Options as Options2,
    type TDataShape,
} from "./client";
import { client } from "./client.gen";
import type {
    AcceptChallengeData,
    AcceptChallengeErrors,
    AcceptChallengeResponses,
    AddStarData,
    AddStarErrors,
    AddStarResponses,
    BlockUserData,
    BlockUserErrors,
    BlockUserResponses,
    CancelAllIncomingChallengesData,
    CancelAllIncomingChallengesErrors,
    CancelAllIncomingChallengesResponses,
    CancelChallengeData,
    CancelChallengeErrors,
    CancelChallengeResponses,
    CollectQuestRewardData,
    CollectQuestRewardErrors,
    CollectQuestRewardResponses,
    CreateChallengeData,
    CreateChallengeErrors,
    CreateChallengeResponses,
    CreateGuestUserData,
    CreateGuestUserResponses,
    DeleteProfilePictureData,
    DeleteProfilePictureErrors,
    DeleteProfilePictureResponses,
    EditProfileSettingsData,
    EditProfileSettingsErrors,
    EditProfileSettingsResponses,
    EditUsernameData,
    EditUsernameErrors,
    EditUsernameResponses,
    GetBlockedUsersData,
    GetBlockedUsersErrors,
    GetBlockedUsersResponses,
    GetChallengeData,
    GetChallengeErrors,
    GetChallengeResponses,
    GetCurrentRatingsData,
    GetCurrentRatingsErrors,
    GetCurrentRatingsResponses,
    GetDailyQuestData,
    GetDailyQuestErrors,
    GetDailyQuestResponses,
    GetGameData,
    GetGameErrors,
    GetGameResponses,
    GetGameResultsData,
    GetGameResultsResponses,
    GetHasBlockedData,
    GetHasBlockedErrors,
    GetHasBlockedResponses,
    GetHasStarredData,
    GetHasStarredErrors,
    GetHasStarredResponses,
    GetMyQuestRankingData,
    GetMyQuestRankingErrors,
    GetMyQuestRankingResponses,
    GetPreferencesData,
    GetPreferencesErrors,
    GetPreferencesResponses,
    GetProfilePictureData,
    GetProfilePictureResponses,
    GetQuestLeaderboardData,
    GetQuestLeaderboardResponses,
    GetRatingArchivesData,
    GetRatingArchivesErrors,
    GetRatingArchivesResponses,
    GetSessionUserData,
    GetSessionUserErrors,
    GetSessionUserResponses,
    GetStarredUsersData,
    GetStarredUsersErrors,
    GetStarredUsersResponses,
    GetStarsReceivedCountData,
    GetStarsReceivedCountResponses,
    GetUserByUsernameData,
    GetUserByUsernameErrors,
    GetUserByUsernameResponses,
    GetUserQuestPointsData,
    GetUserQuestPointsResponses,
    LogoutData,
    LogoutResponses,
    OAuthCallbackData,
    OAuthCallbackResponses,
    RefreshData,
    RefreshErrors,
    RefreshResponses,
    RemoveStarData,
    RemoveStarErrors,
    RemoveStarResponses,
    ReplaceDailyQuestData,
    ReplaceDailyQuestErrors,
    ReplaceDailyQuestResponses,
    SetPreferencesData,
    SetPreferencesErrors,
    SetPreferencesResponses,
    SigninOAuthData,
    TestAuthedData,
    TestAuthedErrors,
    TestAuthedResponses,
    TestGuestData,
    TestGuestErrors,
    TestGuestResponses,
    UnblockUserData,
    UnblockUserErrors,
    UnblockUserResponses,
    UploadProfilePictureData,
    UploadProfilePictureErrors,
    UploadProfilePictureResponses,
} from "./types.gen";

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getRatingArchives = <ThrowOnError extends boolean = false>(
    options: Options<GetRatingArchivesData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetRatingArchivesResponses,
        GetRatingArchivesErrors,
        ThrowOnError
    >({
        url: "/api/Rating/{userId}/archive",
        ...options,
    });
};

export const getCurrentRatings = <ThrowOnError extends boolean = false>(
    options: Options<GetCurrentRatingsData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetCurrentRatingsResponses,
        GetCurrentRatingsErrors,
        ThrowOnError
    >({
        url: "/api/Rating/{userId}",
        ...options,
    });
};

export const getStarredUsers = <ThrowOnError extends boolean = false>(
    options: Options<GetStarredUsersData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStarredUsersResponses,
        GetStarredUsersErrors,
        ThrowOnError
    >({
        url: "/api/Social/starred/{userId}",
        ...options,
    });
};

export const getStarsReceivedCount = <ThrowOnError extends boolean = false>(
    options: Options<GetStarsReceivedCountData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetStarsReceivedCountResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Social/stars/{starredUserId}",
        ...options,
    });
};

export const getHasStarred = <ThrowOnError extends boolean = false>(
    options: Options<GetHasStarredData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetHasStarredResponses,
        GetHasStarredErrors,
        ThrowOnError
    >({
        url: "/api/Social/star/{starredUserId}/exists",
        ...options,
    });
};

export const removeStar = <ThrowOnError extends boolean = false>(
    options: Options<RemoveStarData, ThrowOnError>,
) => {
    return (options.client ?? client).delete<
        RemoveStarResponses,
        RemoveStarErrors,
        ThrowOnError
    >({
        url: "/api/Social/star/{starredUserId}",
        ...options,
    });
};

export const addStar = <ThrowOnError extends boolean = false>(
    options: Options<AddStarData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        AddStarResponses,
        AddStarErrors,
        ThrowOnError
    >({
        url: "/api/Social/star/{starredUserId}",
        ...options,
    });
};

export const getBlockedUsers = <ThrowOnError extends boolean = false>(
    options?: Options<GetBlockedUsersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetBlockedUsersResponses,
        GetBlockedUsersErrors,
        ThrowOnError
    >({
        url: "/api/Social/blocked",
        ...options,
    });
};

export const getHasBlocked = <ThrowOnError extends boolean = false>(
    options: Options<GetHasBlockedData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetHasBlockedResponses,
        GetHasBlockedErrors,
        ThrowOnError
    >({
        url: "/api/Social/block/{blockedUserId}/exists",
        ...options,
    });
};

export const unblockUser = <ThrowOnError extends boolean = false>(
    options: Options<UnblockUserData, ThrowOnError>,
) => {
    return (options.client ?? client).delete<
        UnblockUserResponses,
        UnblockUserErrors,
        ThrowOnError
    >({
        url: "/api/Social/block/{blockedUserId}",
        ...options,
    });
};

export const blockUser = <ThrowOnError extends boolean = false>(
    options: Options<BlockUserData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        BlockUserResponses,
        BlockUserErrors,
        ThrowOnError
    >({
        url: "/api/Social/block/{blockedUserId}",
        ...options,
    });
};

export const getDailyQuest = <ThrowOnError extends boolean = false>(
    options?: Options<GetDailyQuestData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDailyQuestResponses,
        GetDailyQuestErrors,
        ThrowOnError
    >({
        url: "/api/Quests",
        ...options,
    });
};

export const replaceDailyQuest = <ThrowOnError extends boolean = false>(
    options?: Options<ReplaceDailyQuestData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        ReplaceDailyQuestResponses,
        ReplaceDailyQuestErrors,
        ThrowOnError
    >({
        url: "/api/Quests/replace",
        ...options,
    });
};

export const collectQuestReward = <ThrowOnError extends boolean = false>(
    options?: Options<CollectQuestRewardData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        CollectQuestRewardResponses,
        CollectQuestRewardErrors,
        ThrowOnError
    >({
        url: "/api/Quests/claim",
        ...options,
    });
};

export const getUserQuestPoints = <ThrowOnError extends boolean = false>(
    options: Options<GetUserQuestPointsData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetUserQuestPointsResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Quests/points/{userId}",
        ...options,
    });
};

export const getQuestLeaderboard = <ThrowOnError extends boolean = false>(
    options?: Options<GetQuestLeaderboardData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetQuestLeaderboardResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Quests/leaderboard",
        ...options,
    });
};

export const getMyQuestRanking = <ThrowOnError extends boolean = false>(
    options?: Options<GetMyQuestRankingData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetMyQuestRankingResponses,
        GetMyQuestRankingErrors,
        ThrowOnError
    >({
        url: "/api/Quests/leaderboard/me",
        ...options,
    });
};

export const getSessionUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetSessionUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetSessionUserResponses,
        GetSessionUserErrors,
        ThrowOnError
    >({
        url: "/api/Profile/me",
        ...options,
    });
};

export const getUserByUsername = <ThrowOnError extends boolean = false>(
    options: Options<GetUserByUsernameData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetUserByUsernameResponses,
        GetUserByUsernameErrors,
        ThrowOnError
    >({
        url: "/api/Profile/by-username/{username}",
        ...options,
    });
};

export const editProfileSettings = <ThrowOnError extends boolean = false>(
    options: Options<EditProfileSettingsData, ThrowOnError>,
) => {
    return (options.client ?? client).put<
        EditProfileSettingsResponses,
        EditProfileSettingsErrors,
        ThrowOnError
    >({
        url: "/api/Profile/edit-profile",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const editUsername = <ThrowOnError extends boolean = false>(
    options: Options<EditUsernameData, ThrowOnError>,
) => {
    return (options.client ?? client).put<
        EditUsernameResponses,
        EditUsernameErrors,
        ThrowOnError
    >({
        url: "/api/Profile/edit-username",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const deleteProfilePicture = <ThrowOnError extends boolean = false>(
    options?: Options<DeleteProfilePictureData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteProfilePictureResponses,
        DeleteProfilePictureErrors,
        ThrowOnError
    >({
        url: "/api/Profile/profile-picture",
        ...options,
    });
};

export const uploadProfilePicture = <ThrowOnError extends boolean = false>(
    options?: Options<UploadProfilePictureData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UploadProfilePictureResponses,
        UploadProfilePictureErrors,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        url: "/api/Profile/profile-picture",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const getProfilePicture = <ThrowOnError extends boolean = false>(
    options: Options<GetProfilePictureData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetProfilePictureResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Profile/profile-picture/{userId}",
        ...options,
    });
};

export const getPreferences = <ThrowOnError extends boolean = false>(
    options?: Options<GetPreferencesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetPreferencesResponses,
        GetPreferencesErrors,
        ThrowOnError
    >({
        url: "/api/Preference",
        ...options,
    });
};

export const setPreferences = <ThrowOnError extends boolean = false>(
    options: Options<SetPreferencesData, ThrowOnError>,
) => {
    return (options.client ?? client).put<
        SetPreferencesResponses,
        SetPreferencesErrors,
        ThrowOnError
    >({
        url: "/api/Preference",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const getGame = <ThrowOnError extends boolean = false>(
    options: Options<GetGameData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetGameResponses,
        GetGameErrors,
        ThrowOnError
    >({
        url: "/api/Game/{gameToken}",
        ...options,
    });
};

export const getGameResults = <ThrowOnError extends boolean = false>(
    options: Options<GetGameResultsData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetGameResultsResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Game/results/{userId}",
        ...options,
    });
};

export const createChallenge = <ThrowOnError extends boolean = false>(
    options: Options<CreateChallengeData, ThrowOnError>,
) => {
    return (options.client ?? client).put<
        CreateChallengeResponses,
        CreateChallengeErrors,
        ThrowOnError
    >({
        url: "/api/Challenge",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const cancelChallenge = <ThrowOnError extends boolean = false>(
    options: Options<CancelChallengeData, ThrowOnError>,
) => {
    return (options.client ?? client).delete<
        CancelChallengeResponses,
        CancelChallengeErrors,
        ThrowOnError
    >({
        url: "/api/Challenge/by-id/{challengeId}",
        ...options,
    });
};

export const getChallenge = <ThrowOnError extends boolean = false>(
    options: Options<GetChallengeData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetChallengeResponses,
        GetChallengeErrors,
        ThrowOnError
    >({
        url: "/api/Challenge/by-id/{challengeId}",
        ...options,
    });
};

export const acceptChallenge = <ThrowOnError extends boolean = false>(
    options: Options<AcceptChallengeData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        AcceptChallengeResponses,
        AcceptChallengeErrors,
        ThrowOnError
    >({
        url: "/api/Challenge/by-id/{challengeId}/accept",
        ...options,
    });
};

export const cancelAllIncomingChallenges = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<CancelAllIncomingChallengesData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        CancelAllIncomingChallengesResponses,
        CancelAllIncomingChallengesErrors,
        ThrowOnError
    >({
        url: "/api/Challenge/incoming",
        ...options,
    });
};

export const refresh = <ThrowOnError extends boolean = false>(
    options?: Options<RefreshData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        RefreshResponses,
        RefreshErrors,
        ThrowOnError
    >({
        url: "/api/Auth/refresh",
        ...options,
    });
};

export const logout = <ThrowOnError extends boolean = false>(
    options?: Options<LogoutData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        LogoutResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/logout",
        ...options,
    });
};

export const createGuestUser = <ThrowOnError extends boolean = false>(
    options?: Options<CreateGuestUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        CreateGuestUserResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/guest",
        ...options,
    });
};

export const testAuthed = <ThrowOnError extends boolean = false>(
    options?: Options<TestAuthedData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        TestAuthedResponses,
        TestAuthedErrors,
        ThrowOnError
    >({
        url: "/api/Auth/test-auth",
        ...options,
    });
};

export const testGuest = <ThrowOnError extends boolean = false>(
    options?: Options<TestGuestData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        TestGuestResponses,
        TestGuestErrors,
        ThrowOnError
    >({
        url: "/api/Auth/test-guest-auth",
        ...options,
    });
};

export const oAuthCallback = <ThrowOnError extends boolean = false>(
    options: Options<OAuthCallbackData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        OAuthCallbackResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/OAuth/{provider}/callback",
        ...options,
    });
};

export const signinOAuth = <ThrowOnError extends boolean = false>(
    options: Options<SigninOAuthData, ThrowOnError>,
) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: "/api/OAuth/signin/{provider}",
        ...options,
    });
};
