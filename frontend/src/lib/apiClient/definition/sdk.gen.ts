// This file is auto-generated by @hey-api/openapi-ts

import {
    type Options as ClientOptions,
    type TDataShape,
    type Client,
    formDataBodySerializer,
} from "./client";
import type {
    GetSessionUserData,
    GetSessionUserResponses,
    GetSessionUserErrors,
    GetUserData,
    GetUserResponses,
    GetUserErrors,
    EditProfileSettingsData,
    EditProfileSettingsResponses,
    EditProfileSettingsErrors,
    EditUsernameData,
    EditUsernameResponses,
    EditUsernameErrors,
    DeleteProfilePictureData,
    DeleteProfilePictureResponses,
    DeleteProfilePictureErrors,
    UploadProfilePictureData,
    UploadProfilePictureResponses,
    UploadProfilePictureErrors,
    GetProfilePictureData,
    GetProfilePictureResponses,
    GetRatingArchivesData,
    GetRatingArchivesResponses,
    GetRatingArchivesErrors,
    GetGameData,
    GetGameResponses,
    GetGameErrors,
    GetGameResultsData,
    GetGameResultsResponses,
    RefreshData,
    RefreshResponses,
    RefreshErrors,
    LogoutData,
    LogoutResponses,
    CreateGuestUserData,
    CreateGuestUserResponses,
    TestAuthedData,
    TestAuthedResponses,
    TestAuthedErrors,
    TestGuestData,
    TestGuestResponses,
    TestGuestErrors,
    OAuthCallbackData,
    OAuthCallbackResponses,
    SigninOAuthData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getSessionUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetSessionUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        GetSessionUserResponses,
        GetSessionUserErrors,
        ThrowOnError
    >({
        url: "/api/Profile/me",
        ...options,
    });
};

export const getUser = <ThrowOnError extends boolean = false>(
    options: Options<GetUserData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetUserResponses,
        GetUserErrors,
        ThrowOnError
    >({
        url: "/api/Profile/by-username/{username}",
        ...options,
    });
};

export const editProfileSettings = <ThrowOnError extends boolean = false>(
    options: Options<EditProfileSettingsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<
        EditProfileSettingsResponses,
        EditProfileSettingsErrors,
        ThrowOnError
    >({
        url: "/api/Profile/edit-profile",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const editUsername = <ThrowOnError extends boolean = false>(
    options: Options<EditUsernameData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<
        EditUsernameResponses,
        EditUsernameErrors,
        ThrowOnError
    >({
        url: "/api/Profile/edit-username",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

export const deleteProfilePicture = <ThrowOnError extends boolean = false>(
    options?: Options<DeleteProfilePictureData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).delete<
        DeleteProfilePictureResponses,
        DeleteProfilePictureErrors,
        ThrowOnError
    >({
        url: "/api/Profile/profile-picture",
        ...options,
    });
};

export const uploadProfilePicture = <ThrowOnError extends boolean = false>(
    options?: Options<UploadProfilePictureData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).put<
        UploadProfilePictureResponses,
        UploadProfilePictureErrors,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        url: "/api/Profile/profile-picture",
        ...options,
        headers: {
            "Content-Type": null,
            ...options?.headers,
        },
    });
};

export const getProfilePicture = <ThrowOnError extends boolean = false>(
    options: Options<GetProfilePictureData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetProfilePictureResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Profile/profile-picture/{userId}",
        ...options,
    });
};

export const getRatingArchives = <ThrowOnError extends boolean = false>(
    options: Options<GetRatingArchivesData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetRatingArchivesResponses,
        GetRatingArchivesErrors,
        ThrowOnError
    >({
        url: "/api/Rating/{userId}",
        ...options,
    });
};

export const getGame = <ThrowOnError extends boolean = false>(
    options: Options<GetGameData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetGameResponses,
        GetGameErrors,
        ThrowOnError
    >({
        url: "/api/Game/{gameToken}",
        ...options,
    });
};

export const getGameResults = <ThrowOnError extends boolean = false>(
    options: Options<GetGameResultsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GetGameResultsResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Game/results/{userId}",
        ...options,
    });
};

export const refresh = <ThrowOnError extends boolean = false>(
    options?: Options<RefreshData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        RefreshResponses,
        RefreshErrors,
        ThrowOnError
    >({
        url: "/api/Auth/refresh",
        ...options,
    });
};

export const logout = <ThrowOnError extends boolean = false>(
    options?: Options<LogoutData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        LogoutResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/logout",
        ...options,
    });
};

export const createGuestUser = <ThrowOnError extends boolean = false>(
    options?: Options<CreateGuestUserData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        CreateGuestUserResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/Auth/guest",
        ...options,
    });
};

export const testAuthed = <ThrowOnError extends boolean = false>(
    options?: Options<TestAuthedData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        TestAuthedResponses,
        TestAuthedErrors,
        ThrowOnError
    >({
        url: "/api/Auth/test-auth",
        ...options,
    });
};

export const testGuest = <ThrowOnError extends boolean = false>(
    options?: Options<TestGuestData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<
        TestGuestResponses,
        TestGuestErrors,
        ThrowOnError
    >({
        url: "/api/Auth/test-guest-auth",
        ...options,
    });
};

export const oAuthCallback = <ThrowOnError extends boolean = false>(
    options: Options<OAuthCallbackData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        OAuthCallbackResponses,
        unknown,
        ThrowOnError
    >({
        url: "/api/OAuth/{provider}/callback",
        ...options,
    });
};

export const signinOAuth = <ThrowOnError extends boolean = false>(
    options: Options<SigninOAuthData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        unknown,
        unknown,
        ThrowOnError
    >({
        url: "/api/OAuth/signin/{provider}",
        ...options,
    });
};
